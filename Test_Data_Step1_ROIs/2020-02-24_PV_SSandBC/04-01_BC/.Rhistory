nonoverlaproiplotheight <- 5
nonoverlaproiplotwidth <- 8
saveroisgoodsnrplot <- 0 #1 = save, 0 = don't save
roiplotheight <- 5
roiplotwidth <- 6.5
savefinalroisplot <- 0 #1 = save, 0 = don't save
finalroiplotheight <- 5
finalroiplotwidth <- 6.5
#################### Read in data and load libraries #######################
############################################################################
library(ggplot2)
library(dendextend)
library(plyr)
library(dplyr)
library(reshape2)
library(tidyr)
library(reticulate)
myclusterdata <- read.csv("EachPixel_Cluster.csv",check.names = FALSE)
myclustAvgGps_df_sc <- as.data.frame(myclusterdata$AvgGps)
myfiles <- read.csv("EachPixel_Data.csv",check.names = FALSE)
electrodepixels <- read.csv("electrodepixels.csv",header=FALSE)
electrodepixels <- electrodepixels+1 #photoZ starts counting with 0
############## Hierarchical clustering using chosen k ######################
############################################################################
dist_mat <- dist(myclustAvgGps_df_sc,method="euclidean")
hclust_avg <- hclust(dist_mat,method="average")
cut_avg <- cutree(hclust_avg,k=k)
avg_dend_obj <- as.dendrogram(hclust_avg)
avg_col_dend <- color_branches(avg_dend_obj,h=k)
myclusterdata_df_cl <- mutate(myclusterdata, cluster = cut_avg)
myfiles_df_cl <- data.frame(matrix(ncol=ncol(myfiles)+1,
nrow=nrow(myfiles)))
colnames(myfiles_df_cl) <- c(colnames(myfiles),"Cluster")
myfiles_df_cl[,1:ncol(myfiles)] <- myfiles[,1:ncol(myfiles)]
for (i in 1:nrow(myclusterdata_df_cl)) {
myclusterpixelid <- which(myfiles_df_cl$PixelID==myclusterdata_df_cl$PixelID[i])
myfiles_df_cl$Cluster[myclusterpixelid] <- myclusterdata_df_cl$cluster[i]
}
clusteraverages_all <- data.frame(matrix(nrow=k,ncol=2))
colnames(clusteraverages_all) <- c("Avg","SD")
rownames(clusteraverages_all) <- paste(rep("Clust"),1:k,sep="")
clusteraverages <- data.frame(matrix(ncol=2,nrow=k))
colnames(clusteraverages) <- c("k","StN_Avg")
clusteraverages$k <- seq(1:k)
for (i in 1:k) {
allcolmeans <- colMeans(myfiles_df_cl[which(myfiles_df_cl$Cluster==i),])
myclustersd <- sd(as.matrix(myfiles_df_cl[which(myfiles_df_cl$Cluster==i),4:6]))
clusteraverages$StN_Avg[i] <- allcolmeans[which(colnames(myfiles_df_cl)=="AvgGps")]
clusteraverages_all$Avg[i] <- clusteraverages$StN_Avg[i]
clusteraverages_all$SD[i] <- myclustersd
}
if (((min(which(clusteraverages$StN_Avg>SNRcutoff)))-1)>0) {
clustercutoff <- (which(clusteraverages$StN_Avg>SNRcutoff))-1
} else {
clustercutoff <- 0
}
######################### Plot clusters ####################################
############################################################################
ggplot(myfiles_df_cl,aes(x=X,y=Y)) +
geom_tile(aes(fill=myfiles_df_cl$Cluster)) +
labs(title=paste(dateSlice,"Clusters"), fill="SNR Avg +/- SD") +
theme(
axis.title.y = element_blank(),
axis.title.x = element_blank(),
# axis.ticks = element_blank(),
# axis.text = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust=0.5),
legend.position = "none"
) +
guides(fill = guide_legend(keyheight = 0.9)) +
scale_y_reverse() +
scale_fill_gradientn(breaks=seq(1:k),
labels=c(paste(round(clusteraverages_all$Avg,3),"+/-",round(clusteraverages_all$SD,3))),
colors=rev(c("red1","yellow1","green1","dodgerblue1","navy"))
)
# if (saveclusterplot==1) {
#   ggsave("Step2_Clusters.jpg",height=plotheight,width=plotwidth)
# }
matrixplot <- function(matrix_to_plot, ptitle) {
longData<-melt(matrix_to_plot)
longData<-longData[!is.na(longData$value),]
ggplot(longData, aes(x = Var2, y = Var1)) +
geom_tile(aes(fill=value)) +
scale_fill_gradient(low="blue", high="red") +
labs(x="x", y="y", title=ptitle) +
scale_y_reverse() +
theme_bw() + theme(axis.text.x=element_text(size=9, angle=0, vjust=0.3),
axis.text.y=element_text(size=9),
plot.title=element_text(size=11))
}
####################### Find all potential ROIs ############################
############################################################################
height = 80
width = 80
pixel_cluster_data <- t(matrix(myfiles_df_cl$Cluster, ncol=width, nrow=height))
pixel_cluster_data[is.na(pixel_cluster_data)] <- 0
pixel_sn_data <- t(matrix(myfiles_df_cl$Avg, ncol=width, nrow=height))
View(roi_averages)
View(roi_averages)
View(roi_averages)
View(roi_averages)
View(roi_averages)
View(roi_averages)
knitr::knit_engines$set(python = reticulate::eng_python)
setwd("G:/My Drive/Jackson/PhotoZ_data/Step1_ROIs/2020-07-11_ACC/04-01")
########################## Set initial values###############################
############################################################################
k <- 3 #number of clusters chosen by hand based on silhouette plot
SNRcutoff <- 4
myslice <- "04-01"
mydate <- "07-11-2020"
dateSlice <- paste(mydate,myslice,sep=" ")
saveclusterplot <- 0 #1 = save, 0 = don't save
clusterplotheight <- 5
clusterplotwidth <- 6.5
saveallpotentialroisplot <- 0 #1 = save, 0 = don't save
allroiplotheight <- 5
allroiplotwidth <- 6.5
savepotentialroiscorrectsizeplot <- 0 #1 = save, 0 = don't save
nonoverlaproiplotheight <- 5
nonoverlaproiplotwidth <- 8
saveroisgoodsnrplot <- 0 #1 = save, 0 = don't save
roiplotheight <- 5
roiplotwidth <- 6.5
savefinalroisplot <- 0 #1 = save, 0 = don't save
finalroiplotheight <- 5
finalroiplotwidth <- 6.5
#################### Read in data and load libraries #######################
############################################################################
library(ggplot2)
library(dendextend)
library(plyr)
library(dplyr)
library(reshape2)
library(tidyr)
library(reticulate)
myclusterdata <- read.csv("EachPixel_Cluster.csv",check.names = FALSE)
myclustAvgGps_df_sc <- as.data.frame(myclusterdata$AvgGps)
myfiles <- read.csv("EachPixel_Data.csv",check.names = FALSE)
electrodepixels <- read.csv("electrodepixels.csv",header=FALSE)
electrodepixels <- electrodepixels+1 #photoZ starts counting with 0
############## Hierarchical clustering using chosen k ######################
############################################################################
dist_mat <- dist(myclustAvgGps_df_sc,method="euclidean")
hclust_avg <- hclust(dist_mat,method="average")
cut_avg <- cutree(hclust_avg,k=k)
avg_dend_obj <- as.dendrogram(hclust_avg)
avg_col_dend <- color_branches(avg_dend_obj,h=k)
myclusterdata_df_cl <- mutate(myclusterdata, cluster = cut_avg)
myfiles_df_cl <- data.frame(matrix(ncol=ncol(myfiles)+1,
nrow=nrow(myfiles)))
colnames(myfiles_df_cl) <- c(colnames(myfiles),"Cluster")
myfiles_df_cl[,1:ncol(myfiles)] <- myfiles[,1:ncol(myfiles)]
for (i in 1:nrow(myclusterdata_df_cl)) {
myclusterpixelid <- which(myfiles_df_cl$PixelID==myclusterdata_df_cl$PixelID[i])
myfiles_df_cl$Cluster[myclusterpixelid] <- myclusterdata_df_cl$cluster[i]
}
clusteraverages_all <- data.frame(matrix(nrow=k,ncol=2))
colnames(clusteraverages_all) <- c("Avg","SD")
rownames(clusteraverages_all) <- paste(rep("Clust"),1:k,sep="")
clusteraverages <- data.frame(matrix(ncol=2,nrow=k))
colnames(clusteraverages) <- c("k","StN_Avg")
clusteraverages$k <- seq(1:k)
for (i in 1:k) {
allcolmeans <- colMeans(myfiles_df_cl[which(myfiles_df_cl$Cluster==i),])
myclustersd <- sd(as.matrix(myfiles_df_cl[which(myfiles_df_cl$Cluster==i),4:6]))
clusteraverages$StN_Avg[i] <- allcolmeans[which(colnames(myfiles_df_cl)=="AvgGps")]
clusteraverages_all$Avg[i] <- clusteraverages$StN_Avg[i]
clusteraverages_all$SD[i] <- myclustersd
}
if (((min(which(clusteraverages$StN_Avg>SNRcutoff)))-1)>0) {
clustercutoff <- (which(clusteraverages$StN_Avg>SNRcutoff))-1
} else {
clustercutoff <- 0
}
######################### Plot clusters ####################################
############################################################################
ggplot(myfiles_df_cl,aes(x=X,y=Y)) +
geom_tile(aes(fill=myfiles_df_cl$Cluster)) +
labs(title=paste(dateSlice,"Clusters"), fill="SNR Avg +/- SD") +
theme(
axis.title.y = element_blank(),
axis.title.x = element_blank(),
# axis.ticks = element_blank(),
# axis.text = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust=0.5),
legend.position = "none"
) +
guides(fill = guide_legend(keyheight = 0.9)) +
scale_y_reverse() +
scale_fill_gradientn(breaks=seq(1:k),
labels=c(paste(round(clusteraverages_all$Avg,3),"+/-",round(clusteraverages_all$SD,3))),
colors=rev(c("red1","yellow1","green1","dodgerblue1","navy"))
)
# if (saveclusterplot==1) {
#   ggsave("Step2_Clusters.jpg",height=plotheight,width=plotwidth)
# }
matrixplot <- function(matrix_to_plot, ptitle) {
longData<-melt(matrix_to_plot)
longData<-longData[!is.na(longData$value),]
ggplot(longData, aes(x = Var2, y = Var1)) +
geom_tile(aes(fill=value)) +
scale_fill_gradient(low="blue", high="red") +
labs(x="x", y="y", title=ptitle) +
scale_y_reverse() +
theme_bw() + theme(axis.text.x=element_text(size=9, angle=0, vjust=0.3),
axis.text.y=element_text(size=9),
plot.title=element_text(size=11))
}
####################### Find all potential ROIs ############################
############################################################################
height = 80
width = 80
pixel_cluster_data <- t(matrix(myfiles_df_cl$Cluster, ncol=width, nrow=height))
pixel_cluster_data[is.na(pixel_cluster_data)] <- 0
pixel_sn_data <- t(matrix(myfiles_df_cl$Avg, ncol=width, nrow=height))
knitr::knit_engines$set(python = reticulate::eng_python)
setwd("G:/My Drive/Jackson/PhotoZ_data/Step1_ROIs/2020-07-11_ACC/04-01")
########################## Set initial values###############################
############################################################################
k <- 3 #number of clusters chosen by hand based on silhouette plot
SNRcutoff <- 4
myslice <- "04-01"
mydate <- "07-11-2020"
dateSlice <- paste(mydate,myslice,sep=" ")
saveclusterplot <- 0 #1 = save, 0 = don't save
clusterplotheight <- 5
clusterplotwidth <- 6.5
saveallpotentialroisplot <- 0 #1 = save, 0 = don't save
allroiplotheight <- 5
allroiplotwidth <- 6.5
savepotentialroiscorrectsizeplot <- 0 #1 = save, 0 = don't save
nonoverlaproiplotheight <- 5
nonoverlaproiplotwidth <- 8
saveroisgoodsnrplot <- 0 #1 = save, 0 = don't save
roiplotheight <- 5
roiplotwidth <- 6.5
savefinalroisplot <- 0 #1 = save, 0 = don't save
finalroiplotheight <- 5
finalroiplotwidth <- 6.5
#################### Read in data and load libraries #######################
############################################################################
library(ggplot2)
library(dendextend)
library(plyr)
library(dplyr)
library(reshape2)
library(tidyr)
library(reticulate)
myclusterdata <- read.csv("EachPixel_Cluster.csv",check.names = FALSE)
myclustAvgGps_df_sc <- as.data.frame(myclusterdata$AvgGps)
myfiles <- read.csv("EachPixel_Data.csv",check.names = FALSE)
electrodepixels <- read.csv("electrodepixels.csv",header=FALSE)
electrodepixels <- electrodepixels+1 #photoZ starts counting with 0
############## Hierarchical clustering using chosen k ######################
############################################################################
dist_mat <- dist(myclustAvgGps_df_sc,method="euclidean")
hclust_avg <- hclust(dist_mat,method="average")
cut_avg <- cutree(hclust_avg,k=k)
avg_dend_obj <- as.dendrogram(hclust_avg)
avg_col_dend <- color_branches(avg_dend_obj,h=k)
myclusterdata_df_cl <- mutate(myclusterdata, cluster = cut_avg)
myfiles_df_cl <- data.frame(matrix(ncol=ncol(myfiles)+1,
nrow=nrow(myfiles)))
colnames(myfiles_df_cl) <- c(colnames(myfiles),"Cluster")
myfiles_df_cl[,1:ncol(myfiles)] <- myfiles[,1:ncol(myfiles)]
for (i in 1:nrow(myclusterdata_df_cl)) {
myclusterpixelid <- which(myfiles_df_cl$PixelID==myclusterdata_df_cl$PixelID[i])
myfiles_df_cl$Cluster[myclusterpixelid] <- myclusterdata_df_cl$cluster[i]
}
clusteraverages_all <- data.frame(matrix(nrow=k,ncol=2))
colnames(clusteraverages_all) <- c("Avg","SD")
rownames(clusteraverages_all) <- paste(rep("Clust"),1:k,sep="")
clusteraverages <- data.frame(matrix(ncol=2,nrow=k))
colnames(clusteraverages) <- c("k","StN_Avg")
clusteraverages$k <- seq(1:k)
for (i in 1:k) {
allcolmeans <- colMeans(myfiles_df_cl[which(myfiles_df_cl$Cluster==i),])
myclustersd <- sd(as.matrix(myfiles_df_cl[which(myfiles_df_cl$Cluster==i),4:6]))
clusteraverages$StN_Avg[i] <- allcolmeans[which(colnames(myfiles_df_cl)=="AvgGps")]
clusteraverages_all$Avg[i] <- clusteraverages$StN_Avg[i]
clusteraverages_all$SD[i] <- myclustersd
}
if (((min(which(clusteraverages$StN_Avg>SNRcutoff)))-1)>0) {
clustercutoff <- (which(clusteraverages$StN_Avg>SNRcutoff))-1
} else {
clustercutoff <- 0
}
######################### Plot clusters ####################################
############################################################################
ggplot(myfiles_df_cl,aes(x=X,y=Y)) +
geom_tile(aes(fill=myfiles_df_cl$Cluster)) +
labs(title=paste(dateSlice,"Clusters"), fill="SNR Avg +/- SD") +
theme(
axis.title.y = element_blank(),
axis.title.x = element_blank(),
# axis.ticks = element_blank(),
# axis.text = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust=0.5),
legend.position = "none"
) +
guides(fill = guide_legend(keyheight = 0.9)) +
scale_y_reverse() +
scale_fill_gradientn(breaks=seq(1:k),
labels=c(paste(round(clusteraverages_all$Avg,3),"+/-",round(clusteraverages_all$SD,3))),
colors=rev(c("red1","yellow1","green1","dodgerblue1","navy"))
)
# if (saveclusterplot==1) {
#   ggsave("Step2_Clusters.jpg",height=plotheight,width=plotwidth)
# }
matrixplot <- function(matrix_to_plot, ptitle) {
longData<-melt(matrix_to_plot)
longData<-longData[!is.na(longData$value),]
ggplot(longData, aes(x = Var2, y = Var1)) +
geom_tile(aes(fill=value)) +
scale_fill_gradient(low="blue", high="red") +
labs(x="x", y="y", title=ptitle) +
scale_y_reverse() +
theme_bw() + theme(axis.text.x=element_text(size=9, angle=0, vjust=0.3),
axis.text.y=element_text(size=9),
plot.title=element_text(size=11))
}
####################### Find all potential ROIs ############################
############################################################################
height = 80
width = 80
pixel_cluster_data <- t(matrix(myfiles_df_cl$Cluster, ncol=width, nrow=height))
pixel_cluster_data[is.na(pixel_cluster_data)] <- 0
pixel_sn_data <- t(matrix(myfiles_df_cl$Avg, ncol=width, nrow=height))
head(myfiles_df_cl)
py_config()
knitr::knit_engines$set(python = reticulate::eng_python)
# knitr::opts_knit$set(root.dir = "G:/My Drive/Jackson/PhotoZ_data/Step1_ROIs/2020-07-11_ACC/04-01")
# knitr::opts_knit$set(root.dir = "G:/My Drive/Jackson/PhotoZ_data/Step1_ROIs/2020-07-11_ACC/03-01")
knitr::opts_knit$set(root.dir = "G:/My Drive/Jackson/PhotoZ_data/Step1_ROIs/2020-07-11_ACC/02-01")
# knitr::opts_knit$set(root.dir = "G:/My Drive/Jackson/PhotoZ_data/Step1_ROIs/2020-07-12_ACC/06-01")
########################## Set initial values###############################
############################################################################
k <- 3 #number of clusters chosen by hand based on silhouette plot
SNRcutoff <- 5
ROI_diameter_cutoff <- 3
myslice <- "03-01"
mydate <- "07-11-2020"
dateSlice <- paste(mydate,myslice,sep=" ")
height = 80
width = 80
## note that plots are saved in same location as this file, not working directory
saveclusterplot <- 1 #1 = save, 0 = don't save
clusterplotheight <- 6
clusterplotwidth <- 6
saveallpotentialroisplot <- 0 #1 = save, 0 = don't save
allroiplotheight <- 5
allroiplotwidth <- 6.5
savepotentialroiscorrectsizeplot <- 0 #1 = save, 0 = don't save
nonoverlaproiplotheight <- 5
nonoverlaproiplotwidth <- 8
saveroisgoodsnrplot <- 0 #1 = save, 0 = don't save
roiplotheight <- 5
roiplotwidth <- 6.5
savefinalroisplot <- 0 #1 = save, 0 = don't save
finalroiplotheight <- 5
finalroiplotwidth <- 6.5
#################### Read in data and load libraries #######################
############################################################################
library(ggplot2)
library(dendextend)
library(plyr)
library(dplyr)
library(reshape2)
library(tidyr)
library(reticulate)
myclusterdata <- read.csv("EachPixel_Cluster.csv",check.names = FALSE)
myclustAvgGps_df_sc <- as.data.frame(myclusterdata$AvgGps)
myfiles <- read.csv("EachPixel_Data.csv",check.names = FALSE)
electrodepixels <- read.csv("electrodepixels.csv",header=FALSE)
electrodepixels <- electrodepixels+1 #photoZ starts counting with 0
############## Hierarchical clustering using chosen k ######################
############################################################################
dist_mat <- dist(myclustAvgGps_df_sc,method="euclidean")
hclust_avg <- hclust(dist_mat,method="average")
cut_avg <- cutree(hclust_avg,k=k)
avg_dend_obj <- as.dendrogram(hclust_avg)
avg_col_dend <- color_branches(avg_dend_obj,h=k)
myclusterdata_df_cl <- mutate(myclusterdata, cluster = cut_avg)
myfiles_df_cl <- data.frame(matrix(ncol=ncol(myfiles)+1,
nrow=nrow(myfiles)))
colnames(myfiles_df_cl) <- c(colnames(myfiles),"Cluster")
myfiles_df_cl[,1:ncol(myfiles)] <- myfiles[,1:ncol(myfiles)]
for (i in 1:nrow(myclusterdata_df_cl)) {
myclusterpixelid <- which(myfiles_df_cl$PixelID==myclusterdata_df_cl$PixelID[i])
myfiles_df_cl$Cluster[myclusterpixelid] <- myclusterdata_df_cl$cluster[i]
}
clusteraverages_all <- data.frame(matrix(nrow=k,ncol=2))
colnames(clusteraverages_all) <- c("Avg","SD")
rownames(clusteraverages_all) <- paste(rep("Clust"),1:k,sep="")
clusteraverages <- data.frame(matrix(ncol=2,nrow=k))
colnames(clusteraverages) <- c("k","StN_Avg")
clusteraverages$k <- seq(1:k)
for (i in 1:k) {
allcolmeans <- colMeans(myfiles_df_cl[which(myfiles_df_cl$Cluster==i),])
myclustersd <- sd(as.matrix(myfiles_df_cl[which(myfiles_df_cl$Cluster==i),4:6]))
clusteraverages$StN_Avg[i] <- allcolmeans[which(colnames(myfiles_df_cl)=="AvgGps")]
clusteraverages_all$Avg[i] <- clusteraverages$StN_Avg[i]
clusteraverages_all$SD[i] <- myclustersd
}
if (((min(which(clusteraverages$StN_Avg>SNRcutoff)))-1)>0) {
clustercutoff <- (which(clusteraverages$StN_Avg>SNRcutoff))-1
} else {
clustercutoff <- 0
}
######################### Plot clusters ####################################
############################################################################
ggplot(myfiles_df_cl,aes(x=X,y=Y)) +
geom_tile(aes(fill=myfiles_df_cl$Cluster),color="gray") +
labs(title=paste(dateSlice,"Clusters"), fill="SNR Avg +/- SD") +
theme(
axis.title.y = element_blank(),
axis.title.x = element_blank(),
# axis.ticks = element_blank(),
# axis.text = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust=0.5),
legend.position = "none"
) +
guides(fill = guide_legend(keyheight = 0.9)) +
scale_y_reverse() +
scale_fill_gradientn(breaks=seq(1:k),
labels=c(paste(round(clusteraverages_all$Avg,3),"+/-",round(clusteraverages_all$SD,3))),
colors=rev(c("red1","yellow1","green1","dodgerblue1","navy"))
)
if (saveclusterplot==1) {
ggsave("clusterplot.jpg",height=clusterplotheight,width=clusterplotwidth)
}
# matrixplot <- function(matrix_to_plot, ptitle) {
#   longData<-melt(matrix_to_plot)
#   longData<-longData[!is.na(longData$value),]
#   ggplot(longData, aes(x = Var2, y = Var1)) +
#     geom_tile(aes(fill=value)) +
#     scale_fill_gradient(low="blue", high="red") +
#     labs(x="x", y="y", title=ptitle) +
#     scale_y_reverse() +
#     theme_bw() + theme(axis.text.x=element_text(size=9, angle=0, vjust=0.3),
#                        axis.text.y=element_text(size=9),
#                        plot.title=element_text(size=11))
# }
############ Convert data to height x width representation #################
############################################################################
pixel_cluster_data <- t(matrix(myfiles_df_cl$Cluster, ncol=width, nrow=height))
pixel_cluster_data[is.na(pixel_cluster_data)] <- 0
pixel_cluster_data <- pixel_cluster_data[(height:1),]
pixel_sn_data <- t(matrix(myfiles_df_cl$Avg, ncol=width, nrow=height))
myfiles_df_cl_with_electrode <- mutate(myfiles_df_cl,Electrode = 0)
for (i in 1:nrow(electrodepixels)) {
myfiles_df_cl_with_electrode$Electrode[which(myfiles_df_cl_with_electrode$PixelID==electrodepixels[i,1])] <- 1
}
electrode_data <- t(matrix(myfiles_df_cl_with_electrode$Electrode, ncol=width, nrow=height))
electrode_x_min <- min(myfiles_df_cl_with_electrode$X[which(myfiles_df_cl_with_electrode$Electrode==1)])
electrode_tip_x <- max(myfiles_df_cl_with_electrode$X[which(myfiles_df_cl_with_electrode$Electrode==1)])
electrode_y_min <- min(myfiles_df_cl_with_electrode$Y[which(myfiles_df_cl_with_electrode$Electrode==1)])
electrode_y_max <- max(myfiles_df_cl_with_electrode$Y[which(myfiles_df_cl_with_electrode$Electrode==1)])
electrode_tip_y <- (electrode_y_min + electrode_y_max) / 2
py_config()
version()
r.version()
library(ggpubr)
library(pbkrtest)
library(NbClust)
help("install.packages")
update.packages("rENA")
library(rENA)
install.packages("rENA")
install.packages("rock")
install.packages("directedENA", repos = "cran.qe-libs.org”)
)
install.packages("directedENA",repos="cran.qe-libs.org")
install.packages("directedENA")
devtools::install_git(url='https://gitlab.com/epistemic-analytics/qe-packages/directedENA')
install.packages("installr")
library(installr)
updateR()
install.packages("directedENA",repos="cran.qe-libs.org")
devtools:install_git(url = "https://gitlab.com/epistemic-analytics/qe-packages/directedENA")
install.packages(devtools)
install.packages("devtools")
install.packages("directedENA",repos="cran.qe-libs.org")
devtools:install_git(url = "https://gitlab.com/epistemic-analytics/qe-packages/directedENA")
library(devtools)
devtools:install_git(url = "https://gitlab.com/epistemic-analytics/qe-packages/directedENA")
devtools::install_git(url = "https://gitlab.com/epistemic-analytics/qe-packages/directedENA")
install.packages("directedENA")
install.packages("directedENA",repos="cran.qe-libs.org")
devtools::install_git(url = "https://gitlab.com/epistemic-analytics/qe-packages/directedENA")
library(directedENA)
?directedENA
setwd("G:/My Drive/Jackson/Neuroplex_data/Analyzed_with_PhotoZ/Step1_ROIs/2020-02-24_PV_SSandBC/04-01_BC")
################# Set working directory and initial values #################
############################################################################
### click "session" -> "set working directory" -> "choose directory" OR
### control+shift+H, navigate to correct folder, copy working directory
### from console below to text in quotes
knitr::knit_engines$set(python = reticulate::eng_python)
library(Rcpp)
install.packages('Rcpp')
################# Set working directory and initial values #################
############################################################################
### click "session" -> "set working directory" -> "choose directory" OR
### control+shift+H, navigate to correct folder, copy working directory
### from console below to text in quotes
knitr::knit_engines$set(python = reticulate::eng_python)
