legend.position = "none"
) +
guides(fill = guide_legend(keyheight = 0.9)) +
# scale_y_reverse() +
scale_fill_gradientn(breaks=seq(1:k),
labels=c(paste(round(clusteraverages_all$Avg,3),"+/-",round(clusteraverages_all$SD,3))),
colors=rev(c("red1","yellow1","green1","dodgerblue1","navy"))
)
if (saveclusterplot==1) {
ggsave("clusterplot.jpg",height=clusterplotheight,width=clusterplotwidth)
}
# matrixplot <- function(matrix_to_plot, ptitle) {
#   longData<-melt(matrix_to_plot)
#   longData<-longData[!is.na(longData$value),]
#   ggplot(longData, aes(x = Var2, y = Var1)) +
#     geom_tile(aes(fill=value)) +
#     scale_fill_gradient(low="blue", high="red") +
#     labs(x="x", y="y", title=ptitle) +
#     scale_y_reverse() +
#     theme_bw() + theme(axis.text.x=element_text(size=9, angle=0, vjust=0.3),
#                        axis.text.y=element_text(size=9),
#                        plot.title=element_text(size=11))
# }
############ Convert data to height x width representation #################
############################################################################
pixel_cluster_data <- t(matrix(myfiles_df_cl$Cluster, ncol=width, nrow=height))
pixel_cluster_data[is.na(pixel_cluster_data)] <- 0
# pixel_cluster_data <- pixel_cluster_data[(height:1),]
pixel_sn_data <- t(matrix(myfiles_df_cl$Avg, ncol=width, nrow=height))
myfiles_df_cl_with_electrode <- mutate(myfiles_df_cl,Electrode = 0)
for (i in 1:nrow(electrodepixels)) {
myfiles_df_cl_with_electrode$Electrode[which(myfiles_df_cl_with_electrode$PixelID==electrodepixels[i,1])] <- 1
}
electrode_data <- t(matrix(myfiles_df_cl_with_electrode$Electrode, ncol=width, nrow=height))
electrode_x_min <- min(myfiles_df_cl_with_electrode$X[which(myfiles_df_cl_with_electrode$Electrode==1)])
electrode_tip_x <- max(myfiles_df_cl_with_electrode$X[which(myfiles_df_cl_with_electrode$Electrode==1)])
electrode_y_min <- min(myfiles_df_cl_with_electrode$Y[which(myfiles_df_cl_with_electrode$Electrode==1)])
electrode_y_max <- max(myfiles_df_cl_with_electrode$Y[which(myfiles_df_cl_with_electrode$Electrode==1)])
electrode_tip_y <- (electrode_y_min + electrode_y_max) / 2
knitr::knit_engines$set(python = reticulate::eng_python)
# knitr::opts_knit$set(root.dir = "G:/My Drive/Jackson/PhotoZ_data/Step1_ROIs/2020-07-11_ACC/04-01")
knitr::opts_knit$set(root.dir = "G:/My Drive/Jackson/PhotoZ_data/Step1_ROIs/2020-07-11_ACC/03-01")
# knitr::opts_knit$set(root.dir = "G:/My Drive/Jackson/PhotoZ_data/Step1_ROIs/2020-07-11_ACC/02-01")
# knitr::opts_knit$set(root.dir = "G:/My Drive/Jackson/PhotoZ_data/Step1_ROIs/2020-07-12_ACC/06-01")
# reticulate::repl_python() #to run python in r console
########################## Set initial values###############################
############################################################################
k <- 3 #number of clusters chosen by hand based on silhouette plot
SNRcutoff <- 5
ROI_diameter_cutoff <- 3
upside_down <- 0 #1 if upside-down, 0 if not
myslice <- "03-01"
mydate <- "07-11-2020"
dateSlice <- paste(mydate,myslice,sep=" ")
height = 80
width = 80
## note that plots are saved in same location as this file, not working directory
saveclusterplot <- 1 #1 = save, 0 = don't save
clusterplotheight <- 6
clusterplotwidth <- 6
saveallpotentialroisplot <- 0 #1 = save, 0 = don't save
allroiplotheight <- 5
allroiplotwidth <- 6.5
savepotentialroiscorrectsizeplot <- 0 #1 = save, 0 = don't save
nonoverlaproiplotheight <- 5
nonoverlaproiplotwidth <- 8
saveroisgoodsnrplot <- 0 #1 = save, 0 = don't save
roiplotheight <- 5
roiplotwidth <- 6.5
savefinalroisplot <- 0 #1 = save, 0 = don't save
finalroiplotheight <- 5
finalroiplotwidth <- 6.5
#################### Read in data and load libraries #######################
############################################################################
library(ggplot2)
library(dendextend)
library(plyr)
library(dplyr)
library(reshape2)
library(tidyr)
library(reticulate)
myclusterdata <- read.csv("EachPixel_Cluster.csv",check.names = FALSE)
myclustAvgGps_df_sc <- as.data.frame(myclusterdata$AvgGps)
myfiles <- read.csv("EachPixel_Data.csv",check.names = FALSE)
electrodepixels <- read.csv("electrodepixels.csv",header=FALSE)
electrodepixels <- electrodepixels+1 #photoZ starts counting with 0
############## Hierarchical clustering using chosen k ######################
############################################################################
dist_mat <- dist(myclustAvgGps_df_sc,method="euclidean")
hclust_avg <- hclust(dist_mat,method="average")
cut_avg <- cutree(hclust_avg,k=k)
avg_dend_obj <- as.dendrogram(hclust_avg)
avg_col_dend <- color_branches(avg_dend_obj,h=k)
myclusterdata_df_cl <- mutate(myclusterdata, cluster = cut_avg)
myfiles_df_cl <- data.frame(matrix(ncol=ncol(myfiles)+1,
nrow=nrow(myfiles)))
colnames(myfiles_df_cl) <- c(colnames(myfiles),"Cluster")
myfiles_df_cl[,1:ncol(myfiles)] <- myfiles[,1:ncol(myfiles)]
for (i in 1:nrow(myclusterdata_df_cl)) {
myclusterpixelid <- which(myfiles_df_cl$PixelID==myclusterdata_df_cl$PixelID[i])
myfiles_df_cl$Cluster[myclusterpixelid] <- myclusterdata_df_cl$cluster[i]
}
clusteraverages_all <- data.frame(matrix(nrow=k,ncol=2))
colnames(clusteraverages_all) <- c("Avg","SD")
rownames(clusteraverages_all) <- paste(rep("Clust"),1:k,sep="")
clusteraverages <- data.frame(matrix(ncol=2,nrow=k))
colnames(clusteraverages) <- c("k","StN_Avg")
clusteraverages$k <- seq(1:k)
for (i in 1:k) {
allcolmeans <- colMeans(myfiles_df_cl[which(myfiles_df_cl$Cluster==i),])
myclustersd <- sd(as.matrix(myfiles_df_cl[which(myfiles_df_cl$Cluster==i),4:6]))
clusteraverages$StN_Avg[i] <- allcolmeans[which(colnames(myfiles_df_cl)=="AvgGps")]
clusteraverages_all$Avg[i] <- clusteraverages$StN_Avg[i]
clusteraverages_all$SD[i] <- myclustersd
}
if (((min(which(clusteraverages$StN_Avg>SNRcutoff)))-1)>0) {
clustercutoff <- (which(clusteraverages$StN_Avg>SNRcutoff))-1
} else {
clustercutoff <- 0
}
######################### Plot clusters ####################################
############################################################################
ggplot(myfiles_df_cl,aes(x=X,y=Y)) +
geom_tile(aes(fill=myfiles_df_cl$Cluster),color="gray") +
labs(title=paste(dateSlice,"Clusters"), fill="SNR Avg +/- SD") +
theme(
axis.title.y = element_blank(),
axis.title.x = element_blank(),
# axis.ticks = element_blank(),
# axis.text = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust=0.5),
legend.position = "none"
) +
guides(fill = guide_legend(keyheight = 0.9)) +
# scale_y_reverse() +
scale_fill_gradientn(breaks=seq(1:k),
labels=c(paste(round(clusteraverages_all$Avg,3),"+/-",round(clusteraverages_all$SD,3))),
colors=rev(c("red1","yellow1","green1","dodgerblue1","navy"))
)
if (saveclusterplot==1) {
ggsave("clusterplot.jpg",height=clusterplotheight,width=clusterplotwidth)
}
# matrixplot <- function(matrix_to_plot, ptitle) {
#   longData<-melt(matrix_to_plot)
#   longData<-longData[!is.na(longData$value),]
#   ggplot(longData, aes(x = Var2, y = Var1)) +
#     geom_tile(aes(fill=value)) +
#     scale_fill_gradient(low="blue", high="red") +
#     labs(x="x", y="y", title=ptitle) +
#     scale_y_reverse() +
#     theme_bw() + theme(axis.text.x=element_text(size=9, angle=0, vjust=0.3),
#                        axis.text.y=element_text(size=9),
#                        plot.title=element_text(size=11))
# }
############ Convert data to height x width representation #################
############################################################################
pixel_cluster_data <- t(matrix(myfiles_df_cl$Cluster, ncol=width, nrow=height))
pixel_cluster_data[is.na(pixel_cluster_data)] <- 0
# pixel_cluster_data <- pixel_cluster_data[(height:1),]
if (upside_down==0) {
pixel_sn_data <- t(matrix(myfiles_df_cl$Avg, ncol=width, nrow=height))
} else {
pixel_sn_data <- matrix(myfiles_df_cl$Avg, ncol=width, nrow=height)
}
myfiles_df_cl_with_electrode <- mutate(myfiles_df_cl,Electrode = 0)
for (i in 1:nrow(electrodepixels)) {
myfiles_df_cl_with_electrode$Electrode[which(myfiles_df_cl_with_electrode$PixelID==electrodepixels[i,1])] <- 1
}
electrode_data <- t(matrix(myfiles_df_cl_with_electrode$Electrode, ncol=width, nrow=height))
electrode_x_min <- min(myfiles_df_cl_with_electrode$X[which(myfiles_df_cl_with_electrode$Electrode==1)])
electrode_tip_x <- max(myfiles_df_cl_with_electrode$X[which(myfiles_df_cl_with_electrode$Electrode==1)])
electrode_y_min <- min(myfiles_df_cl_with_electrode$Y[which(myfiles_df_cl_with_electrode$Electrode==1)])
electrode_y_max <- max(myfiles_df_cl_with_electrode$Y[which(myfiles_df_cl_with_electrode$Electrode==1)])
electrode_tip_y <- (electrode_y_min + electrode_y_max) / 2
# test2 <- unlist(py$test2)
# pixel_coords_for_all_rois <- py$pixel_coords_for_all_rois
pixel_coords_for_all_rois <- py$pixel_coords_for_all_rois
total_pixels_in_all_rois <- py$total_pixels_in_all_rois
# test
# unlist(test)
final_rois_from_python <- matrix(unlist(pixel_coords_for_all_rois),nrow = total_pixels_in_all_rois,byrow=TRUE)
final_rois <- data.frame(matrix(ncol=5,nrow=nrow(final_rois_from_python)))
colnames(final_rois) <- c("Pixel_ID","X","Y","ROI_ID","SNR")
# final_rois$X <- final_rois_from_python[,1]+1
# final_rois$Y <- 80-(final_rois_from_python[,2]+1)
final_rois$X <- final_rois_from_python[,1]+1
final_rois$Y <- 80-(final_rois_from_python[,2])
final_rois$SNR <- final_rois_from_python[,3]
for (i in 1:nrow(final_rois)) {
all_x <- which(myfiles_df_cl$X==final_rois$X[i])
all_y <- which(myfiles_df_cl$Y==final_rois$Y[i])
final_rois$Pixel_ID[i] <- intersect(all_x,all_y)
}
roi_index <- 0
for (i in 1:length(unique(final_rois$SNR))) {
final_rois$ROI_ID[which(final_rois$SNR==unique(final_rois$SNR)[i])] <- roi_index
roi_index <- roi_index + 1
}
nROIs <- max(final_rois$ROI_ID)+1
nROIs
# test2 <- unlist(py$test2)
# pixel_coords_for_all_rois <- py$pixel_coords_for_all_rois
pixel_coords_for_all_rois <- py$pixel_coords_for_all_rois
total_pixels_in_all_rois <- py$total_pixels_in_all_rois
# test
# unlist(test)
final_rois_from_python <- matrix(unlist(pixel_coords_for_all_rois),nrow = total_pixels_in_all_rois,byrow=TRUE)
final_rois <- data.frame(matrix(ncol=5,nrow=nrow(final_rois_from_python)))
colnames(final_rois) <- c("Pixel_ID","X","Y","ROI_ID","SNR")
# final_rois$X <- final_rois_from_python[,1]+1
# final_rois$Y <- 80-(final_rois_from_python[,2]+1)
final_rois$X <- final_rois_from_python[,1]+1
final_rois$Y <- 80-(final_rois_from_python[,2])
final_rois$SNR <- final_rois_from_python[,3]
for (i in 1:nrow(final_rois)) {
all_x <- which(myfiles_df_cl$X==final_rois$X[i])
all_y <- which(myfiles_df_cl$Y==final_rois$Y[i])
final_rois$Pixel_ID[i] <- intersect(all_x,all_y)
}
roi_index <- 0
for (i in 1:length(unique(final_rois$SNR))) {
final_rois$ROI_ID[which(final_rois$SNR==unique(final_rois$SNR)[i])] <- roi_index
roi_index <- roi_index + 1
}
# nROIs <- max(final_rois$ROI_ID)+1
# dat_file <- data.frame(matrix(ncol=1,nrow=3*nROIs+1+nrow(final_rois)))
# colnames(dat_file) <- NULL
# dat_file[1,1] <- nROIs
# row_id <- 2
# for (i in 0:max(final_rois$ROI_ID)) {
#   dat_file[c(row_id,(row_id+2)),1] <- i
#   dat_file[(row_id+1),1] <- length(which(final_rois$ROI_ID==i))+1
#   dat_file[c((row_id+3):(row_id+2+length(which(final_rois$ROI_ID==i)))),1] <- (final_rois$Pixel_ID[which(final_rois$ROI_ID==i)])-1
#   row_id <- row_id+3+length(which(final_rois$ROI_ID==i))
# }
#
# write.table(dat_file,"final_rois.dat",
#               # paste(min(roiindexesinthisdatfile),"to",max(roiindexesinthisdatfile),".dat",sep=""),
#               row.names = FALSE)
nROIs <- max(final_rois$ROI_ID)+1
datfilebreakpoints <- c(seq(1,nROIs,by=5),nROIs)+1))
nROIs <- max(final_rois$ROI_ID)+1
datfilebreakpoints <- c(seq(1,nROIs,by=5),nROIs)+1)
datfilebreakpoints <- c(seq(1,nROIs,by=5),nROIs)+1
datfilebreakpoints
head(final_rois)
unique(final_rois$ROI_ID)
final_rois
dat_file_electrode <- data.frame(matrix(ncol=1,nrow=3*nROIs+1+nrow(final_rois)))
colnames(dat_file_electrode) <- NULL
dat_file_electrode[1,1] <- nROIs
row_id <- 2
dat_file_electrode[c(row_id,(row_id+2)),1] <- 0
dat_file_electrode[(row_id+1),1] <- length(which(final_rois$ROI_ID==0))+1
dat_file_electrode[c((row_id+3):(row_id+2+length(which(final_rois$ROI_ID==0)))),1] <- (final_rois$Pixel_ID[which(final_rois$ROI_ID==0)])-1
write.table(dat_file,"electrode.dat",row.names = FALSE)
dat_file_electrode <- data.frame(matrix(ncol=1,nrow=3*nROIs+1+nrow(final_rois)))
colnames(dat_file_electrode) <- NULL
dat_file_electrode[1,1] <- nROIs
row_id <- 2
dat_file_electrode[c(row_id,(row_id+2)),1] <- 0
dat_file_electrode[(row_id+1),1] <- length(which(final_rois$ROI_ID==0))+1
dat_file_electrode[c((row_id+3):(row_id+2+length(which(final_rois$ROI_ID==0)))),1] <- (final_rois$Pixel_ID[which(final_rois$ROI_ID==0)])-1
write.table(dat_file_electrode,"electrode.dat",row.names = FALSE)
test <- final_rois[-which(final_rois$ROI_ID==0),]
test
nROIs <- max(final_rois_no_electrode$ROI_ID)+1
final_rois_no_electrode <- final_rois[-which(final_rois$ROI_ID==0),]
nROIs <- max(final_rois_no_electrode$ROI_ID)+1
datfilebreakpoints <- c(seq(1,nROIs,by=5),nROIs)+1
nROIs
max(final_rois$ROI_ID)
max(final_rois_no_electrode$ROI_ID)
i <- 2
roiindexesinthisdatfile <- datfilebreakpoints[i-1]:(datfilebreakpoints[i]-1)
roiindexesinthisdatfile
final_rois_no_electrode
unlist(final_rois_no_electrode$PixelID[roiindexesinthisdatfile])
roiindexesinthisdatfile
final_rois_no_electrode$PixelID[roiindexesinthisdatfile]
final_rois_no_electrode
unlist(final_rois_no_electrode$Pixel_ID[roiindexesinthisdatfile])
length(unlist(final_rois_no_electrode$Pixel_ID[roiindexesinthisdatfile]))
datfile <- data.frame(matrix(ncol=1,nrow=(16+length(unlist(final_rois_no_electrode$Pixel_ID[roiindexesinthisdatfile])))))
colnames(datfile) <- NULL
datfile[1,1] <- 5
rowindex <- 2
pixelidsinthisroi <- unlist(final_rois_no_electrode$Pixel_ID[roiindexesinthisdatfile],recursive=FALSE)[[j]]
for (j in 1:5) {
pixelidsinthisroi <- unlist(final_rois_no_electrode$Pixel_ID[roiindexesinthisdatfile],recursive=FALSE)[[j]]
pixelidsinthisroi <- pixelidsinthisroi-1 #PhotoZ starts counting at 0
datfile[rowindex,1]  <- j-1
datfile[rowindex+1,1] <- length(pixelidsinthisroi)+1
datfile[rowindex+2,1]  <- j-1
datfile[(rowindex+3):(rowindex+3+length(pixelidsinthisroi)-1),1] <- pixelidsinthisroi
rowindex <- rowindex+3+length(pixelidsinthisroi)
}
write.table(datfile,
paste(min(roiindexesinthisdatfile),"to",max(roiindexesinthisdatfile),".dat",sep=""),
row.names = FALSE)
dat_file_electrode <- data.frame(matrix(ncol=1,nrow=3*nROIs+1+nrow(final_rois)))
colnames(dat_file_electrode) <- NULL
dat_file_electrode[1,1] <- nROIs
row_id <- 2
dat_file_electrode[c(row_id,(row_id+2)),1] <- 0
dat_file_electrode[(row_id+1),1] <- length(which(final_rois$ROI_ID==0))+1
dat_file_electrode[c((row_id+3):(row_id+2+length(which(final_rois$ROI_ID==0)))),1] <- (final_rois$Pixel_ID[which(final_rois$ROI_ID==0)])-1
write.table(dat_file_electrode,"electrode.dat",row.names = FALSE)
final_rois_no_electrode <- final_rois[-which(final_rois$ROI_ID==0),]
nROIs <- max(final_rois_no_electrode$ROI_ID)+1
datfilebreakpoints <- c(seq(1,nROIs,by=5),nROIs)+1
for (i in 2:length(datfilebreakpoints)) {
roiindexesinthisdatfile <- datfilebreakpoints[i-1]:(datfilebreakpoints[i]-1)
datfile <- data.frame(matrix(ncol=1,nrow=(16+length(unlist(final_rois_no_electrode$Pixel_ID[roiindexesinthisdatfile])))))
colnames(datfile) <- NULL
datfile[1,1] <- 5
rowindex <- 2
for (j in 1:5) {
pixelidsinthisroi <- unlist(final_rois_no_electrode$Pixel_ID[roiindexesinthisdatfile],recursive=FALSE)[[j]]
pixelidsinthisroi <- pixelidsinthisroi-1 #PhotoZ starts counting at 0
datfile[rowindex,1]  <- j-1
datfile[rowindex+1,1] <- length(pixelidsinthisroi)+1
datfile[rowindex+2,1]  <- j-1
datfile[(rowindex+3):(rowindex+3+length(pixelidsinthisroi)-1),1] <- pixelidsinthisroi
rowindex <- rowindex+3+length(pixelidsinthisroi)
}
write.table(datfile,
paste(min(roiindexesinthisdatfile),"to",max(roiindexesinthisdatfile),".dat",sep=""),
row.names = FALSE)
dat_file <- data.frame(matrix(ncol=1,nrow=3*nROIs+1+nrow(final_rois)))
colnames(dat_file) <- NULL
dat_file[1,1] <- nROIs
row_id <- 2
for (i in 0:max(final_rois$ROI_ID)) {
dat_file[c(row_id,(row_id+2)),1] <- i
dat_file[(row_id+1),1] <- length(which(final_rois$ROI_ID==i))+1
dat_file[c((row_id+3):(row_id+2+length(which(final_rois$ROI_ID==i)))),1] <- (final_rois$Pixel_ID[which(final_rois$ROI_ID==i)])-1
row_id <- row_id+3+length(which(final_rois$ROI_ID==i))
}
write.table(dat_file,"final_rois.dat",
# paste(min(roiindexesinthisdatfile),"to",max(roiindexesinthisdatfile),".dat",sep=""),
row.names = FALSE)
dat_file_electrode <- data.frame(matrix(ncol=1,nrow=3*nROIs+1+nrow(final_rois)))
colnames(dat_file_electrode) <- NULL
dat_file_electrode[1,1] <- nROIs
row_id <- 2
dat_file_electrode[c(row_id,(row_id+2)),1] <- 0
dat_file_electrode[(row_id+1),1] <- length(which(final_rois$ROI_ID==0))+1
dat_file_electrode[c((row_id+3):(row_id+2+length(which(final_rois$ROI_ID==0)))),1] <- (final_rois$Pixel_ID[which(final_rois$ROI_ID==0)])-1
write.table(dat_file_electrode,"electrode.dat",row.names = FALSE)
final_rois_no_electrode <- final_rois[-which(final_rois$ROI_ID==0),]
nROIs <- max(final_rois_no_electrode$ROI_ID)+1
datfilebreakpoints <- c(seq(1,nROIs,by=5),nROIs)+1
for (i in 2:length(datfilebreakpoints)) {
roiindexesinthisdatfile <- datfilebreakpoints[i-1]:(datfilebreakpoints[i]-1)
datfile <- data.frame(matrix(ncol=1,nrow=(16+length(unlist(final_rois_no_electrode$Pixel_ID[roiindexesinthisdatfile])))))
colnames(datfile) <- NULL
datfile[1,1] <- 5
rowindex <- 2
for (j in 1:5) {
pixelidsinthisroi <- unlist(final_rois_no_electrode$Pixel_ID[roiindexesinthisdatfile],recursive=FALSE)[[j]]
pixelidsinthisroi <- pixelidsinthisroi-1 #PhotoZ starts counting at 0
datfile[rowindex,1]  <- j-1
datfile[rowindex+1,1] <- length(pixelidsinthisroi)+1
datfile[rowindex+2,1]  <- j-1
datfile[(rowindex+3):(rowindex+3+length(pixelidsinthisroi)-1),1] <- pixelidsinthisroi
rowindex <- rowindex+3+length(pixelidsinthisroi)
}
write.table(datfile,
paste(min(roiindexesinthisdatfile),"to",max(roiindexesinthisdatfile),".dat",sep=""),
row.names = FALSE)
dat_file_electrode <- data.frame(matrix(ncol=1,nrow=3*nROIs+1+nrow(final_rois)))
colnames(dat_file_electrode) <- NULL
dat_file_electrode[1,1] <- nROIs
row_id <- 2
dat_file_electrode[c(row_id,(row_id+2)),1] <- 0
dat_file_electrode[(row_id+1),1] <- length(which(final_rois$ROI_ID==0))+1
dat_file_electrode[c((row_id+3):(row_id+2+length(which(final_rois$ROI_ID==0)))),1] <- (final_rois$Pixel_ID[which(final_rois$ROI_ID==0)])-1
write.table(dat_file_electrode,"electrode.dat",row.names = FALSE)
final_rois_no_electrode <- final_rois[-which(final_rois$ROI_ID==0),]
nROIs <- max(final_rois_no_electrode$ROI_ID)+1
datfilebreakpoints <- c(seq(1,nROIs,by=5),nROIs)+1
for (i in 2:length(datfilebreakpoints)) {
roiindexesinthisdatfile <- datfilebreakpoints[i-1]:(datfilebreakpoints[i]-1)
datfile <- data.frame(matrix(ncol=1,nrow=(16+length(unlist(final_rois_no_electrode$Pixel_ID[roiindexesinthisdatfile])))))
colnames(datfile) <- NULL
datfile[1,1] <- 5
rowindex <- 2
for (j in 1:5) {
pixelidsinthisroi <- unlist(final_rois_no_electrode$Pixel_ID[roiindexesinthisdatfile],recursive=FALSE)[[j]]
pixelidsinthisroi <- pixelidsinthisroi-1 #PhotoZ starts counting at 0
datfile[rowindex,1]  <- j-1
datfile[rowindex+1,1] <- length(pixelidsinthisroi)+1
datfile[rowindex+2,1]  <- j-1
datfile[(rowindex+3):(rowindex+3+length(pixelidsinthisroi)-1),1] <- pixelidsinthisroi
rowindex <- rowindex+3+length(pixelidsinthisroi)
}
}
i
j
datfilebreakpoints
i <- 1
roiindexesinthisdatfile <- datfilebreakpoints[i-1]:(datfilebreakpoints[i]-1)
datfilebreakpoints
datfilebreakpoints[i-1]
i <- 2
################# Set working directory and initial values #################
############################################################################
### click "session" -> "set working directory" -> "choose directory" OR
### control+shift+H, navigate to correct folder, copy working directory
### from console below to text in quotes
knitr::knit_engines$set(python = reticulate::eng_python)
# knitr::opts_knit$set(root.dir = "COPY WORKING DIRECTORY HERE")
knitr::opts_knit$set(root.dir = "G:/My Drive/Jackson/PhotoZ_data/Step1_ROIs/2020-09-10_FXR1_BC/04-01")
k <- 2 #number of clusters chosen by hand based on silhouette plot
SNRcutoff <- 4
ROI_diameter_cutoff <- 3 # max number of pixels for diameter of ROI
upside_down <- 0 # 1 if upside-down, 0 if not
myslice <- "03-01"
mydate <- "09-10-2020"
dateSlice <- paste(mydate,myslice,sep=" ")
height = 80 #number of pixels in y axis
width = 80 #number of pixels in x axis
## note that plots are saved in same location as this file, not working directory
#################### Read in data and load libraries #######################
############################################################################
suppressMessages(suppressWarnings(library(ggplot2)))
suppressMessages(suppressWarnings(library(dendextend)))
suppressMessages(suppressWarnings(library(plyr)))
suppressMessages(suppressWarnings(library(dplyr)))
suppressMessages(suppressWarnings(library(reshape2)))
suppressMessages(suppressWarnings(library(tidyr)))
suppressMessages(suppressWarnings(library(reticulate)))
myclusterdata <- read.csv("EachPixel_Cluster.csv",check.names = FALSE)
myclustAvgGps_df_sc <- as.data.frame(myclusterdata$AvgGps)
myfiles <- read.csv("EachPixel_Data.csv",check.names = FALSE)
electrodepixels <- read.csv("electrodepixels.csv",header=FALSE)
electrodepixels <- electrodepixels+1 #photoZ starts counting with 0
############## Hierarchical clustering using chosen k ######################
############################################################################
dist_mat <- dist(myclustAvgGps_df_sc,method="euclidean")
hclust_avg <- hclust(dist_mat,method="average")
cut_avg <- cutree(hclust_avg,k=k)
avg_dend_obj <- as.dendrogram(hclust_avg)
avg_col_dend <- color_branches(avg_dend_obj,h=k)
myclusterdata_df_cl <- mutate(myclusterdata, cluster = cut_avg)
myfiles_df_cl <- data.frame(matrix(ncol=ncol(myfiles)+1,
nrow=nrow(myfiles)))
colnames(myfiles_df_cl) <- c(colnames(myfiles),"Cluster")
myfiles_df_cl[,1:ncol(myfiles)] <- myfiles[,1:ncol(myfiles)]
for (i in 1:nrow(myclusterdata_df_cl)) {
myclusterpixelid <- which(myfiles_df_cl$PixelID==myclusterdata_df_cl$PixelID[i])
myfiles_df_cl$Cluster[myclusterpixelid] <- myclusterdata_df_cl$cluster[i]
}
clusteraverages_all <- data.frame(matrix(nrow=k,ncol=2))
colnames(clusteraverages_all) <- c("Avg","SD")
rownames(clusteraverages_all) <- paste(rep("Clust"),1:k,sep="")
clusteraverages <- data.frame(matrix(ncol=2,nrow=k))
colnames(clusteraverages) <- c("k","StN_Avg")
clusteraverages$k <- seq(1:k)
for (i in 1:k) {
allcolmeans <- colMeans(myfiles_df_cl[which(myfiles_df_cl$Cluster==i),])
myclustersd <- sd(as.matrix(myfiles_df_cl[which(myfiles_df_cl$Cluster==i),4:6]))
clusteraverages$StN_Avg[i] <- allcolmeans[which(colnames(myfiles_df_cl)=="AvgGps")]
clusteraverages_all$Avg[i] <- clusteraverages$StN_Avg[i]
clusteraverages_all$SD[i] <- myclustersd
}
if (((min(which(clusteraverages$StN_Avg>SNRcutoff)))-1)>0) {
print("No clusters with average SNR > SNR cutoff")
clustercutoff <- (which(clusteraverages$StN_Avg>SNRcutoff))-1
} else {
clustercutoff <- 0
}
######################### Plot clusters ####################################
############################################################################
ggplot(myfiles_df_cl,aes(x=X,y=Y)) +
geom_tile(aes(fill=myfiles_df_cl$Cluster),color="gray") +
labs(title=paste(dateSlice,"Clusters"), fill="SNR Avg +/- SD") +
theme(
axis.title.y = element_blank(),
axis.title.x = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust=0.5),
legend.position = "none"
) +
guides(fill = guide_legend(keyheight = 0.9)) +
scale_y_reverse() +
scale_fill_gradientn(breaks=seq(1:k),
labels=c(paste(round(clusteraverages_all$Avg,3),"+/-",round(clusteraverages_all$SD,3))),
colors=rev(c("red1","yellow1","green1","dodgerblue1","navy"))
)
ggsave("Step2_clusterplot.jpg",height=6,width=6)
############ Convert data to height x width representation #################
############################################################################
pixel_cluster_data <- t(matrix(myfiles_df_cl$Cluster, ncol=width, nrow=height))
pixel_cluster_data[is.na(pixel_cluster_data)] <- 0
if (upside_down==0) {
pixel_sn_data <- t(matrix(myfiles_df_cl$Avg, ncol=width, nrow=height))
} else {
pixel_sn_data <- matrix(myfiles_df_cl$Avg, ncol=width, nrow=height)
}
myfiles_df_cl_with_electrode <- mutate(myfiles_df_cl,Electrode = 0)
for (i in 1:nrow(electrodepixels)) {
myfiles_df_cl_with_electrode$Electrode[which(myfiles_df_cl_with_electrode$PixelID==electrodepixels[i,1])] <- 1
}
electrode_data <- t(matrix(myfiles_df_cl_with_electrode$Electrode, ncol=width, nrow=height))
electrode_x_min <- min(myfiles_df_cl_with_electrode$X[which(myfiles_df_cl_with_electrode$Electrode==1)])
electrode_tip_x <- max(myfiles_df_cl_with_electrode$X[which(myfiles_df_cl_with_electrode$Electrode==1)])
electrode_y_min <- min(myfiles_df_cl_with_electrode$Y[which(myfiles_df_cl_with_electrode$Electrode==1)])
electrode_y_max <- max(myfiles_df_cl_with_electrode$Y[which(myfiles_df_cl_with_electrode$Electrode==1)])
electrode_tip_y <- (electrode_y_min + electrode_y_max) / 2
